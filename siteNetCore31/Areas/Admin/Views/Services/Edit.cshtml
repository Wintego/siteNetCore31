@model siteNetCore31.Domain.Entities.Service
@{
    ViewBag.Title = Model.H1 != null ? $"{Model.H1} - Редактировать" : "Создать новую услугу";
}
<script src="~/js/ckeditor4/ckeditor.js"></script>

<form asp-area="Admin" asp-controller="Services" asp-action="Edit" method="post" enctype="multipart/form-data">
    <input type="hidden" asp-for="@Model.Id" />
    <input type="hidden" asp-for="@Model.Image" />
    <div>
        <label asp-for="Url"></label>
        <input asp-for="Url" />
        <span asp-validation-for="Url"></span>
    </div>
    <div>
        <label asp-for="H1"></label>
        <input asp-for="H1" />
        <span asp-validation-for="H1"></span>
    </div>
    <div>
        <label asp-for="ShortDescription"></label>
        <input asp-for="ShortDescription" />
        <span asp-validation-for="ShortDescription"></span>
    </div>
    <div>
        <label asp-for="Image"></label>
        <input type="file" asp-for="Image" />
        <span asp-validation-for="Image"></span>
        <span class="image featured"><img src="~/images/@Model.Image" alt="@Model.H1"></span>
    </div>
    <div>
        <label asp-for="Text"></label>
        <textarea asp-for="Text"></textarea>
        <span asp-validation-for="Text"></span>
    </div>
    <hr />
    <div>
        <label asp-for="seoTitle"></label>
        <input asp-for="seoTitle" />
        <span asp-validation-for="seoTitle"></span>
    </div>
    <div>
        <label asp-for="seoDescription"></label>
        <input asp-for="seoDescription" />
        <span asp-validation-for="seoDescription"></span>
    </div>
    <input style="margin-top: 1em" type="submit" class="button" value="Сохранить" />
</form>

<script>
    //CKEDITOR.replace('textarea', {
    //    extraPlugins = 'filebrowser',
    //    filebrowserBrowseUrl: '',
    //    filebrowserUploadUrl: '/Admin/Home/CKEdit4Upload'
    //});
    //CKEDITOR.editorConfig = function (config) {
    //    config.toolbarGroups = [
    //        { name: 'styles', groups: ['styles'] },
    //        { name: 'document', groups: ['mode', 'document', 'doctools'] },
    //        { name: 'editing', groups: ['find', 'selection', 'spellchecker', 'editing'] },
    //        { name: 'forms', groups: ['forms'] },
    //        { name: 'clipboard', groups: ['clipboard', 'undo'] },
    //        { name: 'basicstyles', groups: ['basicstyles', 'cleanup'] },
    //        { name: 'paragraph', groups: ['list', 'indent', 'blocks', 'align', 'bidi', 'paragraph'] },
    //        { name: 'links', groups: ['links'] },
    //        { name: 'insert', groups: ['insert'] },
    //        { name: 'colors', groups: ['colors'] },
    //        { name: 'tools', groups: ['tools'] },
    //        { name: 'others', groups: ['others'] },
    //        { name: 'about', groups: ['about'] }
    //    ];

    //    config.removeButtons = 'Source,Save,Templates,Cut,Undo,Find,SelectAll,About,TextColor,NewPage,Preview,Print,Copy,Redo,Replace,Scayt,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Strike,Subscript,Superscript,CopyFormatting,Outdent,Indent,CreateDiv,JustifyLeft,JustifyCenter,JustifyRight,JustifyBlock,BidiLtr,BidiRtl,Language,Anchor,Flash,HorizontalRule,Smiley,SpecialChar,PageBreak,Iframe,BGColor,Font,FontSize,Format';
    //};
</script>
<script>
    CKEDITOR.replace('@Html.IdFor(x=>x.Text)');
</script>
@*<script>
        ClassicEditor
            .create(document.querySelector('#textcontent'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],
                toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'code'],
                heading: {
                    options: [
                        { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                        { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                        { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' }
                    ]
                }
            })
            .then(editor => {
                // console.log( editor );
            })
            .catch(error => {
                console.log(error);
            });

        // console.log(ClassicEditor.builtinPlugins.map( plugin => plugin.pluginName));

        function MyCustomUploadAdapterPlugin(editor) {
            console.log(editor.plugins);
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                return new MyUploadAdapter(loader);
            };
        }
    </script>*@